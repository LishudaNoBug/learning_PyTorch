# -*- encoding: utf-8 -*-
'''
MysqlUtil.py
Created on 2020/8/27 20:33
Copyright (c) 2020/8/27, Google Copy right
@author: 梁吉
'''

import pymysql
import traceback
import LinearRegressionUtil


class MySQLUtil3:
    conn = pymysql.connect(host="localhost", user="root", passwd="bhcz@2019", db="sea01", charset="utf8")
    cursor = conn.cursor()

    """ 按照两个港口和季节取所有航线数据，返回 list """

    def getXYListLine(self, port_in_id, port_out_id, season, limit):
        conn = self.conn
        cursor = self.cursor
        lineList = []
        try:
            sql = "SELECT ST_ASTEXT(geom) FROM t_route_all" \
                  " WHERE port_in_id='" + port_in_id + "' AND port_out_id='" + port_out_id + "' AND season='" + season + "' LIMIT " + limit
            # print(sql)
            cursor.execute(sql)
            result = cursor.fetchall()
            print("当前记录 %s %s %s 有 %d 条航线" % (port_in_id, port_out_id, season, len(result)))
            ## 遍历航线，循环拼接转成XYLineList
            for row in result:
                # print(row[0])
                lineList.append(row[0])
            conn.commit()
        except:
            traceback.print_exc()
            conn.rollback()
        return lineList

    """
    执行所有 runAll() 取所有数据 交给 toXYList() 执行
    machine_code 机器码对应：hadoop001 1 hadoop002 2 ...
    status 状态码：0：成功标志 1：失败标志 2：初始状态
    portLimit 取多少港口-季节分类数据
    limeLimit 取两个港口间的航线条数
    """

    def runAll(self, machine_code, status, portLimit, lineLimit):
        conn = self.conn
        cursor = self.cursor
        try:
            ## 查询所有数据
            sql = "SELECT x1,y1,x2,y2,port_in_id,port_out_id,season FROM t_pios_linear_view " \
                  " WHERE machine_code='" + machine_code + "' AND status='" + status + "' LIMIT " + portLimit
            print(sql)
            cursor.execute(sql)
            result = cursor.fetchall()
            print("本次循环一共跑 %d 条数据！" % len(result))
            print(type(result), len(result))
            ## 遍历查询的所有数据
            for row in result:
                portA_lot = row[0];
                portA_lat = row[1]
                portB_lot = row[2];
                portB_lat = row[3]
                port_in_id = row[4];
                port_out_id = row[5]
                season = row[6]
                lineList = self.getXYListLine(port_in_id, port_out_id, season, lineLimit)
                print(portA_lot, portA_lat, portB_lot, portB_lat)
                print(port_in_id + "\t" + port_out_id + "\t" + season)
                print(lineList)

                ############## 线性回归代码执行 ############
                tup = LinearRegressionUtil.linearRegress(portA_lot, portA_lat, portB_lot, portB_lat, lineList)
                geom = tup[0]  ## 拟合的航线
                loss = str(tup[1])  ## 损失值
                print(geom)
                print(loss)
                ############## 线性回归代码执行 ############

                reture_status = True  ## True False
                if (reture_status):
                    in_status = '0'
                    "拟合成功：则将拟合的航线、损失值、状态码插入数据库"
                    self.updateStatus(port_in_id, port_out_id, season, machine_code, in_status, loss, geom)
                else:
                    in_status = '-1';
                    loss = '-1';
                    geom = ""
                    "拟合失败：更新状态 status=1为拟合失败"
                    self.updateStatus(port_in_id, port_out_id, season, machine_code, in_status, loss, geom)
            conn.commit()
        except:
            traceback.print_exc()
            conn.rollback()
        finally:
            cursor.close()
            conn.close()

    """更新损失值和处理状态"""

    def updateStatus(self, port_in_id, port_out_id, season, machine_code, status, loss, geom):
        conn = self.conn
        cursor = self.cursor
        try:
            sql = ""
            if (status == '0'):
                """拟合成功则全部更新"""
                sql = "UPDATE t_pios_linear SET `status`= '" + status + "', loss= '" + loss + "', geom= st_geometryfromtext('" + geom + "') WHERE machine_code= '" + machine_code + \
                      "' AND port_in_id= '" + port_in_id + "' AND port_out_id= '" + port_out_id + "' AND season= '" + season + "'"
            else:
                """拟合失败只更新状态"""
                sql = "UPDATE t_pios_linear SET `status`= '" + status + "' WHERE machine_code= '" + machine_code + \
                      "' AND port_in_id= '" + port_in_id + "' AND port_out_id= '" + port_out_id + "' AND season= '" + season + "'"
            # print(sql)
            cursor.execute(sql)
            conn.commit()
            print("当前记录 %s %s %s 数据更新成功" % (port_in_id, port_out_id, season))
        except:
            traceback.print_exc()
            conn.rollback()
            print("当前记录 %s %s %s 数据更新失败" % (port_in_id, port_out_id, season))


if __name__ == '__main__':
    mysql = MySQLUtil3()
    machine_code = '1'  ## 机器码
    status = '2'  ## 初始状态为2,成功为0,失败为1
    portLimit = '30'  ## 取多少条记录跑
    lineLimit = '30'  ## 每个港口之间取多少条航线
    mysql.runAll(machine_code, status, portLimit, lineLimit)

    # portA_lot = 140.7024
    # portA_lat = 35.9531333
    # portB_lot = 141.9666167
    # portB_lat = 39.63415
    # lineList = ['LINESTRING(139.752138333 35.502005,139.75215 35.502015,139.75212 35.50202,139.764056667 35.4537633333,139.766678333 35.2649633333,139.721001667 35.0493833333,139.780088333 34.879485,140.69686 35.3549766667,140.699071667 35.357715,140.73087 35.3960833333,140.731683333 35.397065,140.732111667 35.3975816667,140.73302 35.3986733333,140.733436667 35.3991966667,140.733866667 35.39972,140.734691667 35.4007,140.735603333 35.40178,140.737308333 35.403795,140.743411667 35.4111166667,140.794223333 35.4727733333,140.796845 35.475895,140.949751667 35.683855,140.96424 35.7120433333,141.040781667 35.9448883333,141.082146667 36.1181933333,141.25563 36.753185,141.256351667 36.7557566667,141.256695 36.75695,141.257406667 36.7594666667,141.25776 36.76072,141.258105 36.7619733333,141.25825 36.7624783333,141.259416667 36.7666383333,141.356466667 37.1089033333,141.356773333 37.1101433333,141.357078333 37.1114016667,141.467693333 37.4677233333,141.478155 37.4970283333,141.534598333 37.7260733333,141.560915 37.8296266667,141.58066 37.9355983333,141.586326667 38.027085,141.589738333 38.0361216667,141.593026667 38.044325,141.613968333 38.0992316667,141.642098333 38.1939816667,141.642446667 38.1952333333,141.643151667 38.1977333333,141.64402 38.2009483333,141.644171667 38.20152,141.645085 38.20467,141.647165 38.212705,141.647415 38.2138683333,141.647585 38.214645,141.647676667 38.2150316667,141.648855 38.2193066667,141.64906 38.220065,142.034228333 39.193485,142.034228333 39.193485,141.943798333 40.4004366667,141.93943 40.4149333333,141.852665 40.8016016667,141.727141667 41.2343016667)', 'LINESTRING(138.686966667 34.4596333333,138.759916667 34.4782166667,139.18625 34.6057166667,139.230833333 34.6123,139.421683333 34.6464666667,139.50105 34.6733833333,139.57155 34.7042,139.637733333 34.7319333333,139.6455 34.735,139.647033333 34.7356166667,139.768233333 34.7889666667,139.862933333 34.8306666667,140.059 34.9186,140.295283333 35.0758666667,140.533566667 35.1873166667,140.832083333 35.4990333333,140.85935 35.53965,140.890066667 35.6056,140.8972 35.6148833333,140.912233333 35.6360333333,140.913583333 35.6380166667,140.914083333 35.6387666667,140.91555 35.6410333333,140.916983333 35.6433833333,140.918666667 35.6461833333,140.926933333 35.6585666667,140.93475 35.67295,141.13095 36.36605,141.305383333 36.96365,141.3125 36.9949,141.319066667 37.0253,141.319183333 37.0259166667,141.323033333 37.04335,141.333983333 37.0915,141.3753 37.2571333333,141.400016667 37.35135,141.400716667 37.3539166667,141.402416667 37.3603666667,141.40255 37.3609,141.44055 37.5163166667,141.4843 37.70195,141.484533333 37.7027833333,141.48955 37.7214,141.48965 37.7218,141.4898 37.7223,141.48995 37.7229,141.490083333 37.7234166667,141.490216667 37.7239166667,141.490766667 37.7259333333,141.491466667 37.7283833333,141.491616667 37.7288833333,141.4919 37.7298833333,141.492666667 37.7323666667,141.4928 37.7328166667,141.493233333 37.7343166667,141.493816667 37.7364166667,141.494066667 37.7374333333,141.4942 37.7379333333,141.525266667 37.8443166667,141.53495 37.8899,141.537033333 37.9008333333,141.5404 37.9198833333,141.5404 37.9198833333,141.552466667 37.9945833333,141.702216667 38.4485333333,141.7033 38.4516666667,141.742333333 38.5625333333,141.745916667 38.5724833333,141.76255 38.6189,141.76495 38.6259166667,141.812216667 38.78025,141.8147 38.7879333333,142.038116667 39.2159833333,142.049633333 39.2353833333,142.0508 39.23735,142.056716667 39.2469333333,142.0732 39.2737666667,142.0737 39.2747,142.07525 39.27765,142.078616667 39.2851166667,142.09105 39.3184,142.105216667 39.3658666667,142.110666667 39.3856333333,142.1263 39.4849,142.124916667 39.6744666667,142.123733333 39.6879166667,142.123333333 39.6911166667,142.122333333 39.6985333333,142.12135 39.7055,142.11895 39.7226166667,142.118766667 39.7240666667,142.091783333 39.9458833333,142.091566667 39.94705,142.0915 39.9474666667,142.091216667 39.9491666667,142.091016667 39.95065,142.09075 39.9523,142.0903 39.9549333333,142.0902 39.9554666667,142.09 39.95665,142.089933333 39.9570666667,142.08975 39.9581,142.089216667 39.9613,142.08745 39.9714333333,142.084266667 39.98655,142.08175 39.99605,142.062366667 40.03785,142.05575 40.0518166667,142.050483333 40.06255,142.045966667 40.0713833333,141.930366667 40.3111,141.5129 40.5551,141.501133333 40.5584,141.4923 40.5587833333)', 'LINESTRING(139.651858333 34.7215066667,139.991528333 34.88061,140.541376667 35.2206166667,140.541936667 35.2212333333,140.679726667 35.3846166667,140.789896667 35.5031583333,141.09121 36.51365,141.091538333 36.5155333333,141.09232 36.519875,141.092555 36.5211966667,141.103955 36.5843266667,141.110545 36.6291166667,141.110893333 36.631105,141.111735 36.6357266667,141.111808333 36.636115,141.112016667 36.6372033333,141.112081667 36.63759,141.112486667 36.6399733333,141.113163333 36.6438333333,141.123488333 36.7018283333,141.12359 36.7024633333,141.123696667 36.7030983333,141.124133333 36.70563,141.124233333 36.7061983333,141.124781667 36.7094233333,141.125221667 36.71202,141.125408333 36.7132233333,141.125628333 36.7144866667,141.126176667 36.7176483333,141.126836667 36.7214316667,141.128096667 36.728995,141.128293333 36.7303183333,141.128715 36.7327633333,141.129788333 36.7390866667,141.129881667 36.7396483333,141.137461667 36.7882116667,141.140928333 36.8144366667,141.606386667 38.1500816667,141.615406667 38.1706316667,141.61816 38.1776516667,141.623853333 38.1907416667,141.624816667 38.1931133333,141.722785 38.5054066667,141.723303333 38.5064716667,141.723628333 38.507125,141.944903333 39.0035383333,141.9451 39.0040033333,141.946351667 39.0070216667,141.947321667 39.0092766667,141.953615 39.0242316667,142.010725 39.177135,142.031506667 39.2333766667,142.0355 39.24308,142.057845 39.2985183333,142.059623333 39.3029566667,142.078266667 39.3505466667,142.140923333 39.501455,142.140923333 39.501455,142.059745 39.8325066667,141.940936667 40.198055,141.940716667 40.1986416667,141.938958333 40.20397,141.936613333 40.2110583333,141.935253333 40.2151983333,141.934275 40.21809,141.934028333 40.21873,141.82781 40.5450266667,141.824355 40.5558266667,141.356713333 41.4842366667,141.153615 41.5273466667,141.085421667 41.5402383333,141.063338333 41.54754,141.062546667 41.5478283333,141.0273 41.5632016667,141.015201667 41.5684,141.01449 41.5687383333,141.013783333 41.5690716667,141.011661667 41.57009,141.01095 41.5704283333,141.009446667 41.571125,141.008798333 41.57142,141.00662 41.5724016667,141.00025 41.5755183333,140.9985 41.576345,140.9985 41.576345,140.99419 41.5785433333,140.993755 41.5787633333,140.991655 41.57983,140.989405 41.58099,140.98721 41.58211,140.986335 41.5825616667,140.985018333 41.5832483333,140.976043333 41.587835,140.963215 41.5937266667,140.937156667 41.6069083333,140.916038333 41.6166716667,140.90985 41.619165,140.900496667 41.622475,140.74356 41.69958,140.72949 41.70599,140.720555 41.7105866667,140.716996667 41.7122016667,140.715988333 41.712655,140.704148333 41.71823,140.662641667 41.7676316667,140.66263 41.7677966667,140.66257 41.7676683333,140.662506667 41.7675966667,140.663571667 41.7674433333,140.688435 41.7973716667,140.70395 41.80994)']
    # tup = LinearRegressionUtil.linearRegress(portA_lot, portA_lat, portB_lot, portB_lat, lineList)
    # print(type(tup))
    # print(tup[0])
    # print(tup[1])
